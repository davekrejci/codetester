// <auto-generated />
using System;
using Codetester.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Codetester.Migrations
{
    [DbContext(typeof(CodetesterContext))]
    [Migration("20220525113557_CourseTeachers")]
    partial class CourseTeachers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Codetester.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Codetester.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Codetester.Models.ExamInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamInstances");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EndPosition")
                        .HasColumnType("integer");

                    b.Property<int>("FillInCodeQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("StartPosition")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FillInCodeQuestionId");

                    b.ToTable("FillInCodeBlocks");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeBlockInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EndPosition")
                        .HasColumnType("integer");

                    b.Property<int?>("FillInCodeQuestionInstanceId")
                        .HasColumnType("integer");

                    b.Property<int>("StartPosition")
                        .HasColumnType("integer");

                    b.Property<string>("WidgetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FillInCodeQuestionInstanceId");

                    b.ToTable("FillInCodeBlockInstance");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("MultiChoiceQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MultiChoiceQuestionId");

                    b.ToTable("MultiChoiceAnswers");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceAnswerInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<int?>("MultiChoiceQuestionInstanceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MultiChoiceQuestionInstanceId");

                    b.ToTable("MultiChoiceAnswerInstance");
                });

            modelBuilder.Entity("Codetester.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("QuestionType").HasValue("Question");
                });

            modelBuilder.Entity("Codetester.Models.QuestionInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExamInstanceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAnswered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExamInstanceId");

                    b.ToTable("QuestionInstances");

                    b.HasDiscriminator<string>("QuestionType").HasValue("QuestionInstance");
                });

            modelBuilder.Entity("Codetester.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("SemesterType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("Codetester.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Codetester.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Student");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@codetester.com",
                            FirstName = "David",
                            LastName = "Krejci",
                            PasswordHash = new byte[] { 219, 140, 209, 46, 225, 81, 189, 208, 214, 202, 63, 204, 123, 75, 142, 204, 148, 57, 127, 240, 245, 59, 13, 103, 213, 174, 135, 85, 6, 58, 82, 26, 132, 64, 21, 164, 228, 162, 86, 66, 145, 210, 185, 171, 49, 57, 253, 212, 39, 67, 64, 53, 64, 155, 198, 152, 255, 177, 117, 212, 17, 238, 245, 16 },
                            PasswordSalt = new byte[] { 254, 149, 219, 154, 19, 146, 38, 194, 244, 168, 40, 175, 46, 47, 25, 141, 11, 246, 246, 184, 86, 84, 175, 110, 151, 188, 166, 135, 60, 104, 38, 61, 203, 62, 185, 226, 71, 221, 68, 9, 51, 1, 79, 48, 65, 231, 78, 26, 135, 18, 79, 8, 73, 13, 227, 193, 249, 140, 70, 194, 143, 73, 223, 26, 142, 121, 94, 131, 201, 253, 111, 20, 165, 57, 132, 56, 201, 90, 142, 138, 231, 115, 216, 132, 57, 90, 56, 218, 185, 135, 229, 93, 198, 14, 133, 122, 166, 38, 129, 67, 217, 25, 86, 163, 147, 198, 122, 100, 161, 65, 185, 151, 133, 103, 47, 150, 32, 240, 224, 70, 224, 96, 121, 83, 15, 124, 60, 110 },
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("TeachersId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.Property<int>("ExamsId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("integer");

                    b.HasKey("ExamsId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("ExamTag", b =>
                {
                    b.Property<int>("ExamsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ExamsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ExamTag");
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.Property<int>("QuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("QuestionsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuestionTag");
                });

            modelBuilder.Entity("SemesterUser", b =>
                {
                    b.Property<int>("EnrolledSemestersId")
                        .HasColumnType("integer");

                    b.Property<int>("EnrolledStudentsId")
                        .HasColumnType("integer");

                    b.HasKey("EnrolledSemestersId", "EnrolledStudentsId");

                    b.HasIndex("EnrolledStudentsId");

                    b.ToTable("SemesterUser");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeQuestion", b =>
                {
                    b.HasBaseType("Codetester.Models.Question");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FillCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("fill-in-code");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceQuestion", b =>
                {
                    b.HasBaseType("Codetester.Models.Question");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("multi-choice");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeQuestionInstance", b =>
                {
                    b.HasBaseType("Codetester.Models.QuestionInstance");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("fill-in-code");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceQuestionInstance", b =>
                {
                    b.HasBaseType("Codetester.Models.QuestionInstance");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("multi-choice");
                });

            modelBuilder.Entity("Codetester.Models.Exam", b =>
                {
                    b.HasOne("Codetester.Models.Semester", "Semester")
                        .WithMany("Exams")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("Codetester.Models.ExamInstance", b =>
                {
                    b.HasOne("Codetester.Models.Exam", "Exam")
                        .WithMany("ExamInstances")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codetester.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeBlock", b =>
                {
                    b.HasOne("Codetester.Models.FillInCodeQuestion", "fillInCodeQuestion")
                        .WithMany("FillInCodeBlocks")
                        .HasForeignKey("FillInCodeQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fillInCodeQuestion");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeBlockInstance", b =>
                {
                    b.HasOne("Codetester.Models.FillInCodeQuestionInstance", null)
                        .WithMany("FillInCodeBlocks")
                        .HasForeignKey("FillInCodeQuestionInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceAnswer", b =>
                {
                    b.HasOne("Codetester.Models.MultiChoiceQuestion", "multiChoiceQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("MultiChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("multiChoiceQuestion");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceAnswerInstance", b =>
                {
                    b.HasOne("Codetester.Models.MultiChoiceQuestionInstance", null)
                        .WithMany("Answers")
                        .HasForeignKey("MultiChoiceQuestionInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codetester.Models.QuestionInstance", b =>
                {
                    b.HasOne("Codetester.Models.ExamInstance", "ExamInstance")
                        .WithMany("QuestionInstances")
                        .HasForeignKey("ExamInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamInstance");
                });

            modelBuilder.Entity("Codetester.Models.Semester", b =>
                {
                    b.HasOne("Codetester.Models.Course", "Course")
                        .WithMany("Semesters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Codetester.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codetester.Models.User", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamQuestion", b =>
                {
                    b.HasOne("Codetester.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codetester.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamTag", b =>
                {
                    b.HasOne("Codetester.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codetester.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.HasOne("Codetester.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codetester.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SemesterUser", b =>
                {
                    b.HasOne("Codetester.Models.Semester", null)
                        .WithMany()
                        .HasForeignKey("EnrolledSemestersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codetester.Models.User", null)
                        .WithMany()
                        .HasForeignKey("EnrolledStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Codetester.Models.Course", b =>
                {
                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("Codetester.Models.Exam", b =>
                {
                    b.Navigation("ExamInstances");
                });

            modelBuilder.Entity("Codetester.Models.ExamInstance", b =>
                {
                    b.Navigation("QuestionInstances");
                });

            modelBuilder.Entity("Codetester.Models.Semester", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeQuestion", b =>
                {
                    b.Navigation("FillInCodeBlocks");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Codetester.Models.FillInCodeQuestionInstance", b =>
                {
                    b.Navigation("FillInCodeBlocks");
                });

            modelBuilder.Entity("Codetester.Models.MultiChoiceQuestionInstance", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
